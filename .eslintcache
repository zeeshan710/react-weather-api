[{"D:\\training\\react_weather_api\\src\\index.js":"1","D:\\training\\react_weather_api\\src\\reportWebVitals.js":"2","D:\\training\\react_weather_api\\src\\App.js":"3","D:\\training\\react_weather_api\\src\\screens\\HomeScreen\\HomeScreen.js":"4","D:\\training\\react_weather_api\\src\\components\\SearchBar\\index.js":"5","D:\\training\\react_weather_api\\src\\components\\SearchBar\\SearchBar.js":"6","D:\\training\\react_weather_api\\src\\utils\\index.js":"7","D:\\training\\react_weather_api\\src\\components\\WeatherCard\\index.js":"8","D:\\training\\react_weather_api\\src\\components\\WeatherCard\\WeatherCard.js":"9"},{"size":500,"mtime":499162500000,"results":"10","hashOfConfig":"11"},{"size":362,"mtime":499162500000,"results":"12","hashOfConfig":"11"},{"size":178,"mtime":1607501438574,"results":"13","hashOfConfig":"11"},{"size":1524,"mtime":1607583099820,"results":"14","hashOfConfig":"11"},{"size":63,"mtime":1607500323987,"results":"15","hashOfConfig":"11"},{"size":4248,"mtime":1607681375203,"results":"16","hashOfConfig":"11"},{"size":387,"mtime":1607512502605,"results":"17","hashOfConfig":"11"},{"size":69,"mtime":1607514517224,"results":"18","hashOfConfig":"11"},{"size":10558,"mtime":1607681512964,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"avjbcj",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"22"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"22"},"D:\\training\\react_weather_api\\src\\index.js",[],["43","44"],"D:\\training\\react_weather_api\\src\\reportWebVitals.js",[],"D:\\training\\react_weather_api\\src\\App.js",[],"D:\\training\\react_weather_api\\src\\screens\\HomeScreen\\HomeScreen.js",["45"],"import React from 'react';\r\nimport { Grid, Typography } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport SearchBar from '../../components/SearchBar';\r\nimport WeatherCard from '../../components/WeatherCard'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1\r\n    },\r\n    paper: {\r\n        padding: theme.spacing(2),\r\n        textAlign: \"center\",\r\n        color: theme.palette.text.secondary\r\n    },\r\n    TopBar: {\r\n        color: 'white',\r\n        backgroundColor: '#464571',\r\n    },\r\n    title: {\r\n        padding: theme.spacing(2),\r\n    },\r\n    weatherCard: {\r\n        marginTop: '3em',\r\n        marginLeft: '5em'\r\n    }\r\n}));\r\n\r\nfunction HomeScreen(props) {\r\n    const classes = useStyles();\r\n    return (\r\n        <div className={classes.root}>\r\n            <Grid container spacing={3} justify=\"center\">\r\n                <Grid item xs={12} className={classes.TopBar}>\r\n                    <Typography variant=\"h5\" className={classes.title} >\r\n                        WEATHER FORECAST (5 DAYS)\r\n                    </Typography>\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                    <SearchBar />\r\n                </Grid>\r\n\r\n            </Grid>\r\n\r\n            {/* <Grid container spacing={3} justify=\"center\" className={classes.weatherCard}  >\r\n                <Grid item xs={6} >\r\n                    <WeatherCard />\r\n                </Grid>\r\n            </Grid> */}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default HomeScreen;","D:\\training\\react_weather_api\\src\\components\\SearchBar\\index.js",[],"D:\\training\\react_weather_api\\src\\components\\SearchBar\\SearchBar.js",["46"],"import React, { useState } from 'react';\r\nimport { Grid, TextField, Button, Select, InputLabel, FormControl } from '@material-ui/core'\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Search } from \"@material-ui/icons\";\r\nimport { useFetch } from '../../utils';\r\nimport WeatherCard from '../../components/WeatherCard';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\r\n    TopBar: {\r\n        color: 'white',\r\n        backgroundColor: '#464571',\r\n    },\r\n    title: {\r\n        padding: theme.spacing(2),\r\n    },\r\n    searchField: {\r\n        width: '100%'\r\n    },\r\n    iconButton: {\r\n        backgroundColor: 'white',\r\n        color: 'gray',\r\n        width: '100%',\r\n        height: '100%'\r\n    },\r\n    weatherCard: {\r\n        marginTop: '3em',\r\n        marginLeft: '2em'\r\n    }\r\n}));\r\n\r\n\r\n\r\nfunction SearchBar(props) {\r\n\r\n    const [searchBy, setSearchBy] = useState();\r\n    const [searchValue, setSearchValue] = useState();\r\n    const classes = useStyles();\r\n    const [data, setData] = useState();\r\n    const [displayCard, setDisplayCard] = useState(false)\r\n\r\n\r\n    const handleSearchBy = (event) => { setSearchBy(event.target.value) };\r\n\r\n    const handleSearchValue = (event) => { setSearchValue(event.target.value); }\r\n\r\n    const handleSearchClick = () => {\r\n        setDisplayCard(false)\r\n        switch (searchBy) {\r\n            case '10': FetchWeatherData('q', searchValue.trim()); break\r\n            case '20': FetchWeatherData('id', searchValue.trim()); break\r\n            case '30': FetchWeatherData('zip', searchValue.trim()); break\r\n            default: alert('default')\r\n        }\r\n    }\r\n    const FetchWeatherData = async (searchBy, searchValue) => {\r\n        const data = await useFetch(`http://api.openweathermap.org/data/2.5/forecast?${searchBy}=${searchValue}&units=metric&appid=c73aa228bfba692462f96e89080aa39a`, { method: \"get\" });\r\n        console.log(data);\r\n        if (data.error === null) {\r\n            setData(data.response)\r\n            console.log(\"My data\", data.response);\r\n            if (data.response.cod == \"200\") {\r\n                setDisplayCard(true)\r\n            }\r\n            else {\r\n                setDisplayCard(false)\r\n                alert(data.response.message)\r\n            }\r\n\r\n\r\n        }\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Grid container justify=\"center\">\r\n\r\n                <Grid item xs={3}>\r\n\r\n                    <FormControl variant=\"outlined\" className={classes.searchField}>\r\n                        <InputLabel htmlFor=\"outlined-search-native-simple\">Search By</InputLabel>\r\n                        <Select\r\n                            native\r\n                            value={searchBy}\r\n                            onChange={handleSearchBy}\r\n                            label=\"Search By\"\r\n                            inputProps={{\r\n                                name: \"search\",\r\n                                id: \"outlined-search-native-simple\"\r\n                            }}\r\n                        >\r\n                            <option aria-label=\"None\" value=\"\" />\r\n                            <option value={10}>City Name</option>\r\n                            <option value={20}>City Id</option>\r\n                            <option value={30}>Zip Code</option>\r\n                        </Select>\r\n                    </FormControl>\r\n                </Grid>\r\n\r\n                <Grid item xs={6}>\r\n                    <TextField value={searchValue} onChange={handleSearchValue} id=\"outlined-search\" label=\"Search..\" type=\"search\" variant=\"outlined\" className={classes.searchField} />\r\n                </Grid>\r\n\r\n                <Grid item xs={3}>\r\n                    <Button variant=\"outlined\" className={classes.iconButton} onClick={handleSearchClick}>\r\n                        <Search />\r\n                    </Button>\r\n                </Grid>\r\n\r\n            </Grid>\r\n            {\r\n                displayCard ?\r\n                    <Grid container className={classes.weatherCard}  >\r\n                        <Grid item xs={12} >\r\n                            <WeatherCard data={data} />\r\n                        </Grid>\r\n                    </Grid> : null\r\n            }\r\n\r\n\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBar;","D:\\training\\react_weather_api\\src\\utils\\index.js",[],["47","48"],"D:\\training\\react_weather_api\\src\\components\\WeatherCard\\index.js",[],"D:\\training\\react_weather_api\\src\\components\\WeatherCard\\WeatherCard.js",["49","50","51","52","53","54"],"import React, { useEffect, useState } from 'react';\r\nimport { Grid, Typography, Avatar } from '@material-ui/core';\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Highcharts from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\nimport drilldown from 'highcharts/modules/drilldown';\r\ndrilldown(Highcharts);\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\r\n    weatherCard: {\r\n        color: 'gray'\r\n    },\r\n    avatar: {\r\n        width: theme.spacing(8),\r\n        height: theme.spacing(8),\r\n    },\r\n    temperatureContainer: {\r\n        display: 'flex',\r\n        paddingTop: '1em'\r\n    },\r\n    temperatureSymbol: {\r\n        cursor: 'pointer',\r\n\r\n\r\n    },\r\n    temperatureUnderline: {\r\n        cursor: 'pointer',\r\n        textDecoration: 'underline'\r\n    },\r\n    temparatureValue: {\r\n        marginLeft: '0.3em',\r\n        color: 'black'\r\n    },\r\n    weatherInfoDetail: {\r\n\r\n        paddingTop: '1em',\r\n\r\n    },\r\n    week_avatar_icon: {\r\n        marginLeft: '1.2em',\r\n        width: theme.spacing(8),\r\n        height: theme.spacing(8),\r\n    },\r\n    weekCards: {\r\n        textAlign: 'center',\r\n        cursor: 'pointer',\r\n        '&:active': {\r\n            textAlign: 'center',\r\n            cursor: 'pointer',\r\n            border: '2px solid gray',\r\n            backgroundColor: '#E7E7E7'\r\n        }\r\n    },\r\n    activeWeekCard: {\r\n        textAlign: 'center',\r\n        cursor: 'pointer',\r\n        border: '2px solid gray'\r\n    }\r\n\r\n}));\r\n\r\nfunction WeatherCard(props) {\r\n    const classes = useStyles();\r\n    const { city, list } = props.data\r\n    const { weather, main, dt_txt, wind } = list[0]\r\n    const { name, country } = city\r\n\r\n    const [weatherDetail, setweatherDetail] = useState({\r\n        day: '',\r\n        pressure: '',\r\n        humidity: '',\r\n        wind: '',\r\n        status: '',\r\n        icon: '',\r\n        temperature: ''\r\n    })\r\n\r\n    const [weekData, setweekData] = useState([])\r\n    const [isCelsius, setIsCelsius] = useState(true);\r\n    const [chartData, setChartData] = useState([]);\r\n    const [chartDayHourDetail, setChartDayHourDetail] = useState([])\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        setHeaderData();\r\n        getFiveDaysCards();\r\n\r\n\r\n    }, [props.data])\r\n\r\n    const getChartData = async (week) => {\r\n        let chartData = []\r\n        week.map((item) => {\r\n            const { dt_txt, main, } = item\r\n            let d = new Date(dt_txt);\r\n            let day = getDayName(d.getDay());\r\n\r\n            chartData.push(\r\n                {\r\n                    name: day,\r\n                    y: parseInt(main.temp.toFixed(0)),\r\n                    drilldown: day\r\n                }\r\n            )\r\n        })\r\n        setChartData(chartData);\r\n    }\r\n\r\n\r\n    const setHeaderData = async () => {\r\n\r\n        const d = new Date(dt_txt);\r\n\r\n        const day = await getDayName(d.getDay());\r\n\r\n        setweatherDetail({\r\n            day: day,\r\n            pressure: main.pressure,\r\n            humidity: main.humidity,\r\n            wind: wind.speed,\r\n            status: weather[0].main,\r\n            icon: weather[0].icon,\r\n            temperature: main.temp.toFixed(0)\r\n        })\r\n    }\r\n\r\n    const getDayName = (dayNumber) => {\r\n        switch (dayNumber) {\r\n            case 0: return 'Sunday'\r\n            case 1: return 'Monday'\r\n            case 2: return 'Tuesday'\r\n            case 3: return 'wednesday'\r\n            case 4: return 'Thursday'\r\n            case 5: return 'Friday'\r\n            case 6: return 'Saturday'\r\n            default: return null\r\n        }\r\n    }\r\n\r\n    const getDetailChartData = (week) => {\r\n        let weekHourlyInfo = []\r\n\r\n        week.map((day) => {\r\n            let timeStamp = new Date(day.dt_txt);\r\n            let date = timeStamp.getDate();\r\n            let dayName = getDayName(timeStamp.getDay());\r\n\r\n            let dayDetail = list.filter((item) => {\r\n                const { dt_txt } = item\r\n                let itemTimeStamp = new Date(dt_txt)\r\n                return date == itemTimeStamp.getDate()\r\n            }\r\n            )\r\n\r\n\r\n            const hourInfo = []\r\n            dayDetail.map((item) => {\r\n                const { main } = item\r\n                let timeStamp = new Date(item.dt_txt);\r\n                let time = `${timeStamp.getHours()}:${timeStamp.getMinutes()}0`;\r\n                hourInfo.push([time, parseInt(main.temp.toFixed(0))])\r\n            })\r\n\r\n            let dayHourlyInfo = {\r\n                id: dayName,\r\n                data: hourInfo\r\n            }\r\n\r\n\r\n            weekHourlyInfo.push(dayHourlyInfo)\r\n\r\n        })\r\n        console.log(\"final hour\", weekHourlyInfo);\r\n        setChartDayHourDetail(weekHourlyInfo)\r\n    }\r\n\r\n    const getFiveDaysCards = async () => {\r\n\r\n        const timeStamp = new Date(dt_txt);\r\n        let date = timeStamp.getDate();\r\n        let temp = []\r\n\r\n\r\n        await list.map((item) => {\r\n\r\n            let itemTimeStamp = new Date(item.dt_txt);\r\n            let itemDate = itemTimeStamp.getDate();\r\n\r\n            if (date === itemDate) {\r\n\r\n                date++\r\n                temp.push(item);\r\n\r\n\r\n            }\r\n\r\n        })\r\n        setweekData(temp);\r\n        getChartData(temp);\r\n        getDetailChartData(temp);\r\n    }\r\n    const handleOnClick = (detail) => {\r\n\r\n        setweatherDetail(detail)\r\n    }\r\n\r\n    const celsiusToFahrenheit = (val) => {\r\n        return (val * (9 / 5)) + 32\r\n    }\r\n    const handleCelsiusClick = () => {\r\n        setIsCelsius(true);\r\n\r\n    }\r\n    const handleFahrenheitClick = () => {\r\n        setIsCelsius(false);\r\n\r\n    }\r\n    const options = {\r\n        chart: {\r\n            type: 'areaspline'\r\n        },\r\n        credits: {\r\n            enabled: false\r\n        },\r\n        tooltip: {\r\n            formatter() {\r\n                return ` Temperature: ${this.y}\\u00b0 C`\r\n            }\r\n        },\r\n        title: {\r\n            text: 'Weather Forecast'\r\n        },\r\n        yAxis: {\r\n            title: {\r\n                text: 'Temperature'\r\n            }\r\n        },\r\n        xAxis: {\r\n            type: 'category',\r\n\r\n\r\n        },\r\n        series: [\r\n            {\r\n                name: 'Days',\r\n                data: chartData\r\n\r\n            }\r\n        ],\r\n        drilldown: {\r\n            name: 'Hours',\r\n            series: chartDayHourDetail\r\n\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className={classes.weatherCard}>\r\n            <Grid item  >\r\n                <Typography variant=\"h5\" >\r\n                    {`${name} ,${country}`}\r\n                </Typography>\r\n\r\n            </Grid>\r\n\r\n            <Grid item  >\r\n                <Typography variant=\"h7\" >\r\n                    {weatherDetail.day}\r\n                </Typography>\r\n            </Grid>\r\n\r\n            <Grid item  >\r\n                <Typography variant=\"h7\" >\r\n                    {weatherDetail.status}\r\n                </Typography>\r\n            </Grid>\r\n\r\n            <Grid container  >\r\n\r\n                <Grid item xs={7} className={classes.temperatureContainer}>\r\n                    <Avatar alt=\"weather\" src={`http://openweathermap.org/img/w/${weatherDetail.icon}.png`} className={classes.avatar} />\r\n\r\n                    <Typography variant=\"h3\" className={classes.temparatureValue} >\r\n                        {isCelsius ? weatherDetail.temperature : celsiusToFahrenheit(weatherDetail.temperature).toFixed(0)}\r\n                    </Typography>\r\n\r\n                    <Typography variant=\"h5\" className={isCelsius ? classes.temperatureUnderline : classes.temperatureSymbol} onClick={handleCelsiusClick}>\r\n                        {`\\u00b0`}C\r\n                    </Typography>\r\n                    <Typography variant=\"h5\" onClick={handleCelsiusClick}>\r\n                        {` |`}\r\n                    </Typography>\r\n\r\n                    <Typography variant=\"h5\" className={!isCelsius ? classes.temperatureUnderline : classes.temperatureSymbol} onClick={handleFahrenheitClick}>\r\n                        {`\\u00b0`}F\r\n                    </Typography>\r\n                </Grid>\r\n\r\n                <Grid item xs={5} className={classes.weatherInfoDetail}>\r\n                    <Typography variant=\"subtitle2\" >\r\n                        {`Pressure: ${weatherDetail.pressure} hPa`}\r\n                    </Typography>\r\n                    <Typography variant=\"subtitle2\" >\r\n                        {`Humidity: ${weatherDetail.humidity}%`}\r\n                    </Typography>\r\n                    <Typography variant=\"subtitle2\" >\r\n                        {`Wind Speed: ${weatherDetail.wind} m/s`}\r\n                    </Typography>\r\n\r\n                </Grid>\r\n            </Grid>\r\n\r\n            <Grid container spacing={1} style={{ marginTop: '1em' }}>\r\n                {weekData.length > 0 ? weekData.slice(0, 5).map((item) => {\r\n                    const { weather, dt_txt, main, wind } = item\r\n                    let d = new Date(dt_txt);\r\n                    let day = getDayName(d.getDay());\r\n\r\n                    let max = main.temp_max.toFixed(0);\r\n                    let min = main.temp_min.toFixed(0)\r\n\r\n                    const detail = {\r\n                        day: day,\r\n                        pressure: main.pressure,\r\n                        humidity: main.humidity,\r\n                        wind: wind.speed,\r\n                        status: weather[0].main,\r\n                        icon: weather[0].icon,\r\n                        temperature: main.temp.toFixed(0)\r\n                    }\r\n\r\n                    return (\r\n                        <Grid item xs={2} className={classes.weekCards} onClick={() => handleOnClick(detail)}>\r\n                            <Typography variant=\"subtitle2\" >\r\n                                {day}\r\n                            </Typography>\r\n                            <Avatar alt=\"weather\" src={`http://openweathermap.org/img/w/${weather[0].icon}.png`} className={classes.week_avatar_icon} />\r\n\r\n                            <Typography variant=\"subtitle2\" >\r\n                                {`${isCelsius ? min : celsiusToFahrenheit(min).toFixed(0)}\\u00b0 ${isCelsius ? max : celsiusToFahrenheit(max).toFixed(0)}\\u00b0`}\r\n                            </Typography>\r\n                        </Grid>\r\n\r\n\r\n                    )\r\n                }) : null}\r\n\r\n            </Grid>\r\n            <Grid xs={12} style={{ marginTop: '6em' }}>\r\n                {\r\n                    chartDayHourDetail.length > 0 ?\r\n\r\n                        <HighchartsReact highcharts={Highcharts} options={options} /> : null}\r\n            </Grid>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default WeatherCard;",{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","severity":1,"message":"60","line":5,"column":8,"nodeType":"61","messageId":"62","endLine":5,"endColumn":19},{"ruleId":"63","severity":1,"message":"64","line":63,"column":35,"nodeType":"65","messageId":"66","endLine":63,"endColumn":37},{"ruleId":"55","replacedBy":"67"},{"ruleId":"57","replacedBy":"68"},{"ruleId":"69","severity":1,"message":"70","line":91,"column":8,"nodeType":"71","endLine":91,"endColumn":20,"suggestions":"72"},{"ruleId":"73","severity":1,"message":"74","line":95,"column":25,"nodeType":"75","messageId":"76","endLine":95,"endColumn":27},{"ruleId":"73","severity":1,"message":"74","line":145,"column":24,"nodeType":"75","messageId":"76","endLine":145,"endColumn":26},{"ruleId":"63","severity":1,"message":"64","line":153,"column":29,"nodeType":"65","messageId":"66","endLine":153,"endColumn":31},{"ruleId":"73","severity":1,"message":"74","line":159,"column":34,"nodeType":"75","messageId":"76","endLine":159,"endColumn":36},{"ruleId":"73","severity":1,"message":"74","line":186,"column":31,"nodeType":"75","messageId":"76","endLine":186,"endColumn":33},"no-native-reassign",["77"],"no-negated-in-lhs",["78"],"no-unused-vars","'WeatherCard' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["77"],["78"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getFiveDaysCards' and 'setHeaderData'. Either include them or remove the dependency array.","ArrayExpression",["79"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-global-assign","no-unsafe-negation",{"desc":"80","fix":"81"},"Update the dependencies array to be: [getFiveDaysCards, props.data, setHeaderData]",{"range":"82","text":"83"},[2210,2222],"[getFiveDaysCards, props.data, setHeaderData]"]